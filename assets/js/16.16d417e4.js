(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{390:function(a,e,o){a.exports=o.p+"assets/img/facade.27f29f81.png"},391:function(a,e,o){a.exports=o.p+"assets/img/facadeEx.33492398.jpg"},476:function(a,e,o){"use strict";o.r(e);var s=o(42),t=Object(s.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"observer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#observer"}},[a._v("#")]),a._v(" Observer")]),a._v(" "),s("h2",{attrs:{id:"historico-de-versao"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#historico-de-versao"}},[a._v("#")]),a._v(" Histórico de Versão")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("Data")]),a._v(" "),s("th",[a._v("Autor(es)")]),a._v(" "),s("th",[a._v("Descrição")]),a._v(" "),s("th",[a._v("Versão")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("19/11/2020")]),a._v(" "),s("td",[a._v("\n       João Pedro("),s("a",{attrs:{target:"blank",href:"https://github.com/jppgomes"}},[a._v("jppgomes")]),a._v(")\n      ")]),a._v(" "),s("td",[a._v("Adicionando utilização do observer no projeto")]),a._v(" "),s("td",[a._v("0.1")])])])]),a._v(" "),s("h2",{attrs:{id:"introducao"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#introducao"}},[a._v("#")]),a._v(" Introdução")]),a._v(" "),s("p",{attrs:{align:"justify"}},[a._v(" \nO principal objetivo de um Façade é facilitar o uso de um ou mais componentes de software. Isso é realizado por meio da construção de uma “fachada” que isola a aplicação cliente de toda a complexidade de um subsistema. O padrão Façade define uma interface de alto-nível que simplifica as chamadas a subsistemas complexos.\n")]),a._v(" "),s("p",{attrs:{align:"justify"}},[a._v(" \nBasicamente, o padrão Façade propõe uma forma mais simples de interagir com o sistema que o modelo atual oferece. Claro, por ser mais simples, esta abordagem funciona quando o cliente precisa utilizar apenas um subconjunto dos recursos oferecidos pelo subsistema e/ou adaptá-lo para uso de uma maneira particular em suas necessidades.\n")]),a._v(" "),s("h2",{attrs:{id:"estrutura"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#estrutura"}},[a._v("#")]),a._v(" Estrutura")]),a._v(" "),s("p",[s("img",{attrs:{src:o(390),alt:"Estrutura observer"}})]),a._v(" "),s("h2",{attrs:{id:"aplicacoes-no-projeto-qrodizio"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aplicacoes-no-projeto-qrodizio"}},[a._v("#")]),a._v(" Aplicações no Projeto(QRodízio)")]),a._v(" "),s("h3",{attrs:{id:"disclaimer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#disclaimer"}},[a._v("#")]),a._v(" Disclaimer")]),a._v(" "),s("p",[a._v("Primeiramente é bom deixar claro que nosso projeto está utilizando de linguagens multi-paradigmas(python e javascript) sendo assim, adaptações aos padrões são necessárias para não fugir do estilo do código utilizado.")]),a._v(" "),s("p",[a._v('A Linguem python possui em seu "zen of python" a seguinte declaração: "Simple is better than complex". Seguindo essa filosifia, decidimos que, se algo pode ser feito em uma função, então será feito em uma função. Assim mantendo um código mais limpo, simples e fácil de manter.')]),a._v(" "),s("h3",{attrs:{id:"utilizacao"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#utilizacao"}},[a._v("#")]),a._v(" Utilização")]),a._v(" "),s("p",[a._v("Em nossa base de código o padrão facade é utilizado para realizar operações e commit no banco de dado\npostgree.")]),a._v(" "),s("p",[a._v("Exemplo código:")]),a._v(" "),s("p",[s("img",{attrs:{src:o(391),alt:"facade"}})]),a._v(" "),s("h2",{attrs:{id:"aplicabilidade"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aplicabilidade"}},[a._v("#")]),a._v(" Aplicabilidade")]),a._v(" "),s("ul",[s("li",[a._v("Utilize o padrão Observer quando mudanças no estado de um objeto podem precisar mudar outros objetos, e o atual conjunto de objetos é desconhecido de antemão ou muda dinamicamente.")]),a._v(" "),s("li",[a._v("O padrão Observer permite que qualquer objeto que implemente a interface do assinante possa se inscrever para notificações de eventos em objetos da publicadora. Você pode adicionar o mecanismo de inscrição em seus botões, permitindo que o cliente coloque seu próprio código através de classes assinantes customizadas.")]),a._v(" "),s("li",[a._v("Utilize o padrão quando alguns objetos em sua aplicação devem observar outros, mas apenas por um tempo limitado ou em casos específicos.")])]),a._v(" "),s("h2",{attrs:{id:"referencias"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#referencias"}},[a._v("#")]),a._v(" Referências")]),a._v(" "),s("ul",[s("li",[a._v("\nREFACTORING.GURU. Strategy. Disponível em: https://refactoring.guru/pt-br/design-patterns/observer . Acesso em: 26 de outubro. 2020.\n")])])])}),[],!1,null,null,null);e.default=t.exports}}]);